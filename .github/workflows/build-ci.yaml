name: Docker image stage CI

on:
  push:
    # branches-ignore:
    #   - master
    paths-ignore:
      - README.md
      - .gitignore
      - .gitattributes
      - .editorconfig
      - research
  pull_request:
    paths-ignore:
      - README.md
      - .gitignore
      - .gitattributes
      - .editorconfig
      - research

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Cache env
        id: cache-env
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('budget/requirements.txt') }}
      - name: Create env
        if: steps.cache-env.outputs.cache-hit != 'true'
        run: |
          pip install -r budget/requirements.txt
      - name: Test requirements
        run: |
          python3 ./budget/manage.py test --failfast >django.test 2>&1
      - name: Test notification
        if: ${{ failure() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Django tests failed"
          document: django.test

  build:
    # needs:
    #   - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker images
        run: |
          docker build --force-rm -t ghcr.io/xausssr/vasilisc.budget .
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Push Docker images
        run: |
          docker images --format "{{.Repository}}:{{.Tag}}" ghcr.io/${{ github.repository_owner }}/vasilisc.budget* | while read IMAGE; do
            IMAGE_ID=$(echo $IMAGE | awk -F ":" '{print $1}')
            docker tag $IMAGE $IMAGE_ID:$GITHUB_SHA
            # docker push $IMAGE_ID
            echo -e "IMAGE: $IMAGE\tIMAGE_ID: $IMAGE_ID"
          done
          docker images
      - name: Test notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_TO }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          message: New contaner builded!!!
